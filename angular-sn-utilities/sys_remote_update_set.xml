<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2017-02-08 07:20:27">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="Global">global</application>
<application_name>Global</application_name>
<application_scope>global</application_scope>
<application_version/>
<collisions/>
<commit_date/>
<deleted/>
<description/>
<inserted/>
<name>platexp - 2017-02-08 23:14 2</name>
<origin_sys_id/>
<release_date/>
<remote_sys_id>abdca5b9133c720066a0bd522244b0e5</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2017-02-08 07:20:27</sys_created_on>
<sys_id>ce2e25f9133c720066a0bd522244b056</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2017-02-08 07:20:27</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_7a2d2db9133c720066a0bd522244b077</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description/&gt;&lt;global&gt;false&lt;/global&gt;&lt;name&gt;platexp-lib&lt;/name&gt;&lt;script&gt;&lt;![CDATA[(function (angular) {

    angular.module('platexp', [])
        .factory('widgetsFactory', [function () {
            var reusableWidgets = {};
            return {
                getReusableWidget: function (id) {
                    return reusableWidgets[id];
                },
                addReusableWidgets: function (id, response) {
                    reusableWidgets[id] = response;
                },
            };
        }])
        .directive('includeWidget', function (spUtil, widgetsFactory) {
            return {
                restrict: 'E',
                scope: {
                    id: '@',
                    refresh: '@?',
                    parameters: '=?'
                },
                template: function (elem, attr) {
                    return '&lt;sp-widget widget="widget"&gt;&lt;/sp-widget&gt;';
                },
                controller: function ($scope) {
                    var reusableWidget = widgetsFactory.getReusableWidget($scope.id);
                    if (reusableWidget &amp;&amp; !$scope.refresh) {
                        $scope.widget = reusableWidget;
                    } else {
                        var parameter = $scope.parameters || {};
                        spUtil.get($scope.id, {parameters: parameter}).then(function (response) {
                            if (!$scope.refresh) {
                                widgetsFactory.addReusableWidgets($scope.id, response);
                            }
                            $scope.widget = response

                        });
                    }

                }
            };
        })
        .directive('includeWidgetAutoRefresh', function ($compile) {
            var getTemplate = function (scope) {
                if (scope.id) {
                    return "&lt;include-widget id='" + scope.id + "' parameters='parameters' refresh='refresh'&gt;&lt;/include-widget&gt;";
                } else {
                    return "&lt;span&gt;Opps, No Content&lt;/span&gt;";
                }
            };
            return {
                restrict: 'E',
                scope: {
                    id: '=?',
                    refresh: '@?',
                    parameters: '=?'
                },
                // template: function (elem, attr) {
                //     return '&lt;sp-widget widget="widget"&gt;&lt;/sp-widget&gt;';
                // },
                link: function (scope, element, attrs) {
                    scope.$watch('id', function (value) {
                        element.html(getTemplate(scope)).show();
                        $compile(element.contents())(scope);
                    });
                }

            };
        })
        .directive('compile', function ($compile) {
            return function (scope, element, attrs) {
                scope.$watch(
                    function (scope) {
                        // watch the 'compile' expression for changes
                        return scope.$eval(attrs.compile);
                    },
                    function (value) {
                        // when the 'compile' expression changes
                        // assign it into the current DOM
                        element.html(value);

                        // compile the new DOM and link it to the current
                        // scope.
                        // NOTE: we only compile .childNodes so that
                        // we don't get into infinite loop compiling ourselves
                        $compile(element.contents())(scope);
                    }
                );
            }
        })
        .factory('appManager', function ($rootScope) {
            return {
                setTitle: function (title) {
                    $rootScope.title = title;
                    window.snmCabrillo.viewLayout.setTitle(title);
                }
            }
        })
        .factory('sharedObj', function () {
            var obj = {};

            return {
                _get: function (key) {
                    return obj[key];
                },
                _set: function (key, value) {
                    obj[key] = value;
                }

            }
        })

})(angular);
]]&gt;&lt;/script&gt;&lt;script_name/&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2017-02-08 07:16:20&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;7a2d2db9133c720066a0bd522244b077&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;platexp-lib&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_7a2d2db9133c720066a0bd522244b077&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2017-02-08 07:18:48&lt;/sys_updated_on&gt;&lt;use_scoped_format&gt;false&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
<remote_update_set display_value="platexp - 2017-02-08 23:14 2">ce2e25f9133c720066a0bd522244b056</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2017-02-08 07:20:27</sys_created_on>
<sys_id>4a2e25f9133c720066a0bd522244b057</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2017-02-08 07:20:27</sys_updated_on>
<table/>
<target_name>platexp-lib</target_name>
<type>UI Script</type>
<update_domain>global</update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
